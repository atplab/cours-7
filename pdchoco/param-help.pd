#N canvas 211 66 997 837 12;
#X declare -path pdchoco;
#X floatatom 271 86 5 0 0 0 - - - 0;
#X floatatom 199 107 5 0 127 0 - - - 0;
#X floatatom 640 120 5 0 0 0 - - - 0;
#X floatatom 641 53 5 0 0 0 - - - 0;
#X obj 27 135 print;
#X obj 272 111 send /group/name;
#X floatatom 26 268 5 0 0 0 - - - 0;
#X floatatom 27 201 5 0 0 0 - - - 0;
#X obj 144 238 hsl 162 19 0 127 0 0 yes_send yes_receive empty -2 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X text 313 236 <- Check the send and receive values of the GUI element, f 18;
#X floatatom 28 84 5 0 0 0 - - - 0;
#X obj 92 264 s yes_receive;
#X obj 90 208 r yes_send;
#X floatatom 219 737 5 0 0 0 - - - 0;
#X obj 640 89 param nope;
#X text 23 46 To work \, param must be linked to an external object This is usually a GUI object.;
#X text 687 52 If no linked object \, will not work!;
#X text 397 111 This sends to the param.;
#X text 22 164 You can link remotely to the external object with send and receives.;
#X floatatom 28 404 5 0 0 0 - - - 0;
#X floatatom 29 337 5 0 0 0 - - - 0;
#X obj 189 372 hsl 162 19 0 127 0 0 constrained_s constrained_r empty -2 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X text 23 301 You can set constraints on the value on the second output.;
#X obj 143 400 clip 0 127;
#X floatatom 498 351 5 0 0 0 - - - 0;
#X obj 27 373 param constrained;
#X obj 143 321 r constrained_s;
#X obj 143 430 s constrained_r;
#X obj 499 376 send constrained;
#X text 623 376 This sends to the "constrained" param.;
#X floatatom 40 580 5 0 0 0 - - - 0;
#X floatatom 41 513 5 0 0 0 - - - 0;
#X obj 199 575 clip 0 127;
#X floatatom 388 490 5 0 0 1 gui_unconstrained gui_unconstrained_r gui_unconstrained_s 0;
#X obj 197 513 r gui_unconstrained_s;
#X obj 199 605 s gui_unconstrained_r;
#X obj 41 546 param gui_unconstrained;
#X text 24 485 For example \, enter 256 in the linked gui object :;
#X floatatom 623 587 5 0 0 0 - - - 0;
#X floatatom 624 520 5 0 0 0 - - - 0;
#X obj 770 580 clip 0 127;
#X floatatom 798 493 5 0 127 1 gui_constrained gui_constrained_r gui_constrained_s 0;
#X text 618 491 This example fixes it :;
#X obj 624 553 param gui_constrained;
#X obj 767 520 r gui_constrained_s;
#X obj 770 610 s gui_constrained_r;
#X obj 216 681 param-example /group1;
#X obj 485 680 param-example /group2;
#X obj 218 769 s /group1/alpha;
#X floatatom 490 732 5 0 0 0 - - - 0;
#X obj 489 764 s /group2/alpha;
#X text 32 637 Params are can be grouped with the use of abstraction arguments and \$1. Open the following abstraction to see how this works., f 127;
#X text 496 314 Constraints will also be applied on remote setting of the value...;
#X text 24 455 ... but constraints ARE NOT applied to the linked GUI object. You must set the constraints of that GUI object in its own properties., f 128;
#X obj 27 109 param /group/name 64;
#X obj 25 237 param yes 64;
#X text 30 807 DO NOT USE \$0 in param names or groups as this will break saving and restoring their values!, f 127;
#X text 506 179 NOTE : a param creates two receives. A receive that matches the name of the param and another one with the same name but with a _get suffix. Do not use the second one as it is reserved for internal use.;
#X obj 25 8 declare -path pdchoco;
#X connect 0 0 5 0;
#X connect 1 0 54 1;
#X connect 3 0 14 0;
#X connect 7 0 55 0;
#X connect 10 0 54 0;
#X connect 12 0 55 1;
#X connect 13 0 48 0;
#X connect 14 0 2 0;
#X connect 20 0 25 0;
#X connect 23 0 27 0;
#X connect 24 0 28 0;
#X connect 25 0 19 0;
#X connect 25 1 23 0;
#X connect 26 0 25 1;
#X connect 31 0 36 0;
#X connect 32 0 35 0;
#X connect 34 0 36 1;
#X connect 36 0 30 0;
#X connect 36 1 32 0;
#X connect 39 0 43 0;
#X connect 40 0 45 0;
#X connect 43 0 38 0;
#X connect 43 1 40 0;
#X connect 44 0 43 1;
#X connect 49 0 50 0;
#X connect 54 0 4 0;
#X connect 54 1 1 0;
#X connect 55 0 6 0;
#X connect 55 1 11 0;
